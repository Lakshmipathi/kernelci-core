#!/usr/bin/env groovy

/*
  Copyright (C) 2020 Collabora Limited
  Author: Lakshmipathi Ganapathi <lakshmipathi.ganapathi@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

KCI_API_URL (https://api.kernelci.org)
  URL of the KernelCI backend API
KCI_TOKEN_ID
  Identifier of the KernelCI backend API token stored in Jenkins
KCI_CORE_URL (https://github.com/kernelci/kernelci-core.git)
  URL of the kernelci-core repository
KCI_CORE_BRANCH (master)
  Name of the branch to use in the kernelci-core repository
DOCKER_BASE
  Dockerhub base address used for the build images
*/

@Library('kernelci') _
import org.kernelci.util.Job


def listConfigs(kci_core, config_list) {
    dir(kci_core) {
        def rootfs_config_list_raw = sh(script: """\
./kci_rootfs \
list_configs \
""", returnStdout: true).trim()
        def rootfs_config_list =  rootfs_config_list_raw.tokenize('\n')
        for (String config_name: rootfs_config_list) {
            config_list.add(config_name)
        }
    }
}


def buildRootfsStep(job, config) {
    def node_label = "docker"
    def parallel_builds = "4"
    def pipeline_version = VersionNumber(
        versionNumberString: '${BUILD_DATE_FORMATTED,"yyyyMMdd"}.${BUILDS_TODAY_Z}')

    def str_params = [
        'CONFIG_NAME': config,
        'PIPELINE_VERSION':pipeline_version,
    ]
    def job_params = []

    def j = new Job()
    j.addStrParams(job_params, str_params)

    return {
          def res = build(job: job, parameters: job_params, propagate: false)
    }
}


node("docker && build-trigger") {
    def j = new Job()
    def kci_core = "${env.WORKSPACE}/kernelci-core"
    def docker_image = "${params.DOCKER_BASE}debos"
    def configs = []

    j.dockerPullWithRetry(docker_image).inside() {

        stage("Init") {
            timeout(time: 15, unit: 'MINUTES') {
                j.cloneKciCore(
                    kci_core, params.KCI_CORE_URL, params.KCI_CORE_BRANCH)
            }

        }

        stage("Configs") {
            listConfigs(kci_core, configs)
        }

        stage("Build") {
            def builds = [:]
            def i = 0

            for (config_name in configs) {

                def step_name = "${i} ${config_name}"
                print(step_name)

                builds[step_name] = buildRootfsStep(
                    "rootfs-builder", config_name)

                i += 1
            }

            parallel(builds)
        }

    }
}
