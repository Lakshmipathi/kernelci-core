@Library('kernelci') _
/* ----------------------------------------------------------------------------
 * Jenkins parameters

DOCKER_BASE
  Dockerhub base address used for the build images

*/

def build_rootfs(arch,rootfs_config,pipeline_version) {
  return {
    node ("debos && docker") {
      def kci_core = "${env.WORKSPACE}"
      try {
        checkout scm
        docker.image('kernelci/staging-debos').inside(' --privileged --device /dev/kvm ') {
        stage ("Build base image for ${arch}") {
                dir(kci_core) {
		             sh """
                                ls -l
                                #python3 ./kci_rootfs build --config ${rootfs_config} \
			        #--data-path jenkins/debian/debos --arch-type ${arch}
                                mkdir -p ${pipeline_version}
                                touch ${pipeline_version}/a234 
                                touch ${pipeline_version}/a2345 
                                #mv jenkins/debian/debos/${rootfs_config}/${arch} ${pipeline_version}
                               """
                 }
        }
        stage ("Upload images for ${arch}") {
                withCredentials([string(credentialsId: params.KCI_TOKEN_ID, variable: 'API_TOKEN')]) {
                  dir(kci_core) {
		             sh """
                                echo 'uploading images'
                                python3 ./kci_rootfs upload \
                                --token ${API_TOKEN} \
                                --api ${params.KCI_API_URL} \
                                --rootfs-dir ${pipeline_version} \
                                --upload-path laks/test_uploads/${pipeline_version}
                               """
                  }
               }
        }
        }

      } catch (e) {
        throw e
      } finally {
        archiveArtifacts artifacts: "${pipeline_version}/**"
      }
    }
  }
}

node("debos && docker") {
    def docker_image = "${params.DOCKER_BASE}debos"
    def rootfs_config = "${params.CONFIG_NAME}"
    def pipeline_version = VersionNumber(
        versionNumberString: '${BUILD_DATE_FORMATTED,"yyyyMMdd"}.${BUILDS_TODAY_Z}')

    def arch_list = ["amd64", "arm64"]
    //def arch_list = ["amd64", "arm64","armel","armhf","i386","mips","mipsel","mips64el"]

    def buildjobs=[:]
    for (int i = 0; i < arch_list.size(); i++) {
          buildjobs[i]=build_rootfs(arch_list[i],rootfs_config,pipeline_version)
    }

    parallel buildjobs
}
